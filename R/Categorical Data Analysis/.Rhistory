sqrt(38.885 * 125.271)
65.391 / 69.794
r_squared = r ** 2
print(paste(c('r_squared: ', r_squared), collapse=' '))
0.937 ** 2
(1 - 0.878) * 125.271
15.283 / 18
sqrt(0.849)
r = (sxy) / sqrt(sxx * syy)
print(paste(c('r: ', r), collapse=' '))
r_squared = r ** 2
print(paste(c('r_squared: ', r_squared), collapse=' '))
se_squared = ((1 - r_squared) * syy) / (n - 2)
print(paste(c('se_squared: ', se_squared), collapse=' '))
se = sqrt(se_squared)
print(paste(c('se: ', se), collapse=' '))
t(0.025, 18)
qt(0.025, 18)
qt(0.025, 18, lower.tail=F)
(8 - 2.775)
(8 - 2.775) / 38.885
1 / 20
2.1 * 0.921
0.05 + 0.134
sqrt(0.05 + 0.134)
1.934 * 0.429
14.397 - 0.830
14.397 + 0.830
(12 - 0.941) / 1.682
control_treatment = c(42, 46, 41, 53, 47, 41, 47, 49, 48, 43)
stimulant_treatment = c(49, 49, 41, 47, 53, 43, 49, 54, 53, 47)
s1 = var(control_treatment)
s2 = var(stimulant_treatment)
length(control_treatment)
length(stimulant_treatment)
s1
s2
18.06 / 15.34
qf(1-0.025, 9, 9)
mean1 = mean(control_treatment)
mean2 = mean(stimulant_treatment)
mean1
mean2
15.34 / 10
18.06 / 10
1.534 + 1.806
(15.34 + 18.06) / 10
45.7 - 48.5
sqrt(3.34)
2.8 / 1.823
15.34 / 10
1.534 / 3.34
(1 - 0.459) ** 2
0.293 * 9
0.459 ** 2
(0.459 ** 2) * 9
2.637 + 1.896
(9 * 9)/4.533
qt(1 - 0.025, 17.87)
qt(0.025, 17.87)
975.5 - 754.5 - 35.5
35.5 / 3
754.5 / 9
185.5 / 27
11.83 / 6.87
qf(0.05, 3, 12)
qf(1 - 0.05, 3, 12)
qf(1- 0.025, 9, 9)
t.test(control_treatment, stimulant_treatment, alternative = 'two.sided', mu = 0, var.equal = F)
1.682 * 8
13.456 + 0.941
qf(1-0.025, 9, 9)
control_treatment = c(42, 46, 41, 53, 47, 41, 47, 49, 48, 43)
stimulant_treatment = c(49, 49, 41, 47, 53, 43, 49, 54, 53, 47)
s1 = var(control_treatment)
s2 = var(stimulant_treatment)
mean1 = mean(control_treatment)
mean2 = mean(stimulant_treatment)
t.test(control_treatment, stimulant_treatment, alternative = 'two.sided', mu = 0, var.equal = F)
t.test(control_treatment, stimulant_treatment, alternative = 'two.sided', mu = 0, var.equal = T)
qf(1 - 0.05, 3, 12)
qf(1 - 0.05, 3, 9)
11.83 / 6.87
11.83 / 6.87
t(0.025, 27)
qt(0.025, 27)
# Question 3)
# function y takes in x, beta0, beta1, errors as input and returns y
y <- function(X, beta0, beta1, errs) {
(beta0 + beta1 * X + errs)
}
# function x will generate X values
x <- function(n, mean, sd) {
(rnorm(n=n, mean=mean, sd=sd))
}
# function err will generate errors
err <- function(n, sd) {
(rnorm(n, mean=0, sd=sd))
}
# function MSE will take n = no of observations, sigma as inputs
MSE <- function(n, sigma) {
beta0 = 1.5
beta1 = 3
mean = 1
# sum of squared errors
sum_squared_errors = c()
# looping 200 times
for (i in 1:200) {
# calling function x to generate X values
X = x(n, mean, sigma)
# calling function err to generate error values
errors = err(n, sigma)
# calling function y to generate Y values
Y = y(X, beta0, beta1, errors)
# creating model
linear_model = lm(Y ~ X)
# get the model coefficients
coefficients = coef(linear_model)
beta0.hat = coefficients['(Intercept)']
beta1.hat = coefficients['X']
# calculate the squared errors, se
se = (beta0.hat - beta0) ** 2 + (beta1.hat - beta1) ** 2
sum_squared_errors = append(sum_squared_errors, se)
}
mean(sum_squared_errors)
}
# Question 3b)
# no of observations vector
no_of_observations = c(50, 100, 200)
# different sigma values
sigmas = c(0.1, 0.5)
# running a nested for loop to calculate MSE for each n and sigma combination
for (n in no_of_observations) {
for (s in sigmas) {
print(paste(paste('For n =', n, 'and, sigma = ', s, ',The MSE is: '), round(MSE(n, s), 4)))
}
}
# Question 3)
# function y takes in x, beta0, beta1, errors as input and returns y
y <- function(X, beta0, beta1, errs) {
(beta0 + beta1 * X + errs)
}
# function x will generate X values
x <- function(n, mean, sd) {
(rnorm(n=n, mean=mean, sd=sd))
}
# function err will generate errors
err <- function(n, sd) {
(rnorm(n, mean=0, sd=sd))
}
# function MSE will take n = no of observations, sigma as inputs
MSE <- function(n, sigma) {
beta0 = 1.5
beta1 = 3
mean = 1
# sum of squared errors
sum_squared_errors = c()
# looping 200 times
for (i in 1:200) {
# calling function x to generate X values
X = x(n, mean, sigma)
# calling function err to generate error values
errors = err(n, sigma)
# calling function y to generate Y values
Y = y(X, beta0, beta1, errors)
# creating model
linear_model = lm(Y ~ X)
# get the model coefficients
coefficients = coef(linear_model)
beta0.hat = coefficients['(Intercept)']
beta1.hat = coefficients['X']
# calculate the squared errors, se
se = (beta0.hat - beta0) ** 2 + (beta1.hat - beta1) ** 2
sum_squared_errors = append(sum_squared_errors, se)
}
mean(sum_squared_errors)
}
# Question 3b)
# no of observations vector
no_of_observations = c(50, 100, 200)
# different sigma values
sigmas = c(0.1, 0.5)
# running a nested for loop to calculate MSE for each n and sigma combination
for (n in no_of_observations) {
for (s in sigmas) {
print(paste(paste('For n =', n, 'and, sigma = ', s, ',The MSE is: '), round(MSE(n, s), 4)))
}
}
library(ISLR2)
library(ISLR2)
install.packages("ISLR")
library(ISLR)
library(ISLR)
load(Weekly)
head(Weekly)
sxx''
sxx
pnorm(-12.487)
qnorm(0.01)
pnorm(-12.48)
pnorm(-12.487)
366/64364
pchisq(32135, 3)
pchisq(32135, 3, lower.tail = F)
qchisq(0.05, 3)
qchisq(1-0.05, 3)
qf(1-0.05, 12)
qf(1-0.05, 3, 12)
pf(qf(1-0.05, 3, 12), 3, 12)
pf(qf(1-0.05, 3, 12), 3, 12)
qf(1-0.05, 2, 12)
qf(1-0.05, 3, 12)
qf(1-0.05, 3, 12)
pf(0.98, 3, 12)
pf(1-0.98, 3, 12)
pf(0.98, 3, 12)
pf(0.98, 3, 12, lower.tail = F)
pf(0.98, 3, 12, lower.tail = F)
185.5/27
pf(1.722, 3, 27, lower.tail = F)
pf(1-0.05,3,27)
45.5/46.292
qf(0.05, 3, 12)
qf(0.05, 3, 12, lower.tail = F)
qf(1-0.025, 3, 12, lower.tail = F)
qf(1-0.025, 3, 12, lower.tail = T)
qf(1-0.025, 3, 27, lower.tail = T)
qf(1-0.025, 3, 27, lower.tail = F)
qf(1-0.05, 3, 27, lower.tail = F)
qf(1-0.05, 3, 27, lower.tail = T)
qf(1-0.05, 3, 27, lower.tail = T)
prop.test(x=78,n=200,conf.level=0.95,correct=FALSE)
(366 * 14314)/64730
grades = matrix(c(2, 22, 14, 1, 36, 18, 1, 0), ncol=4, byrow=TRUE)
colnames(grades) = c('A', 'B', 'C', 'F')
rownames(grades) = c('taking', 'not_taking')
grades = as.table(grades)
grades
chisq.test(grades)
chisq.test(grades)
dat = matrix(c(11, 185, 8, 162, 14123, 13888, 18190, 18163), ncol=4, byrow=TRUE)
colnames(dat) = c('ad', 'ap', 'bd', 'bp')
rownames(dat) = c('casps', 'non_casps')
dat = as.table(dat)
chisq.test(dat)
qchisq(1-0.05, 3)
dat = matrix(c(11, 185, 8, 162, 14123, 13888, 18190, 18163), ncol=4, byrow=TRUE)
colnames(dat) = c('ad', 'ap', 'bd', 'bp')
rownames(dat) = c('casps', 'non_casps')
dat = as.table(dat)
chisq.test(dat)
trials = matrix(c(27, 30, 116, 4413, 5777, 19398), ncol=2, byrow=T)
trials = matrix(c(27, 30, 116, 4413, 5777, 19398), ncol=2, byrow=T)
colnames(trials) = c('trial_a', 'trial_b', 'trial_c')
rownames(trials) = c('cases', 'non_cases')
trials = as.type(trials)
chisq.test(trials)
trials = matrix(c(27, 30, 116, 4413, 5777, 19398), ncol=3, byrow=T)
colnames(trials) = c('trial_a', 'trial_b', 'trial_c')
rownames(trials) = c('cases', 'non_cases')
trials = as.type(trials)
chisq.test(trials)
trials = matrix(c(27, 30, 116, 4413, 5777, 19398), ncol=3, byrow=T)
colnames(trials) = c('trial_a', 'trial_b', 'trial_c')
rownames(trials) = c('cases', 'non_cases')
trials = as.table(trials)
chisq.test(trials)
(19398 - (29588 * 19514) / (29761)) / ((29588 * 19514) / (29761))
(19398 - ((29588 * 19514) / (29761))) / ((29588 * 19514) / (29761))
((19398 - ((29588 * 19514) / (29761))) ** 2) / ((29588 * 19514) / (29761))
((30 - ((173 * 5807) / (29761))) ** 2) / ((173 * 5807) / (29761))
mean(c(72, 93, 100))
pchisq(1-0.05, 2)
((30 - ((173 * 5807) / (29761))) ** 2) / ((173 * 5807) / (29761))
((27 - ((173 * 4440) / (29761))) ** 2) / ((173 * 4440) / (29761))
((30 - ((173 * 5807) / (29761))) ** 2) / ((173 * 5807) / (29761))
((30 - ((173 * 5807) / (29761))) ** 2) / ((173 * 5807) / (29761))
((116 - ((173 * 19514) / (29761))) ** 2) / ((173 * 19514) / (29761))
((4413 - ((29588 * 4440) / (29761))) ** 2) / ((29588 * 4440) / (29761))
((5777 - ((29588 * 5807) / (29761))) ** 2) / ((29588 * 5807) / (29761)))
((5777 - ((29588 * 5807) / (29761))) ** 2) / ((29588 * 5807) / (29761))
((5777 - ((29588 * 5807) / (29761))) ** 2) / ((29588 * 5807) / (29761))
((19398 - ((29588 * 19514) / (29761))) ** 2) / ((29588 * 19514) / (29761))
((19398 - ((29588 * 19514) / (29761))) ** 2) / ((29588 * 19514) / (29761))
sum(c(0.05490, 0.4179, 0.05803, 0.0003, 0.0024, 0.0003))
sum(c(0.05490, 0.4179, 0.05803, 0.0003, 0.0024, 0.0003))
pchisq(0.53383, 2, lower.tail = F)
qchisq(1 - 0.05, 2)
qchisq(1 - 0.05, 3)
qchisq(1 - 0.05, 2)
qchisq(1 - 0.05, 3)
qchisq(1 - 0.05, 3, lower.tail = F)
qchisq(1 - 0.05, 3, lower.tail = T)
qchisq(1 - 0.05, 2)
qchisq(1 - 0.05, 2, lower.tail = F)
((0.379)(1 - 0.379)) / 870
((0.379)(1 - 0.379)) / (870)
((0.379) * (1 - 0.379)) / (870)
sqrt(((0.379) * (1 - 0.379)) / (870))
sqrt(0.00027)
qnorm(0.05)
qnorm(0.05, lower.tail = F)
0.0164 * 1.645
0.379 + 0.0270
0.379 - 0.0270
0.38 - 0.026
43 / 50
((0.86) * (1 - 0.86)) / 50
sqrt
sqrt(((0.86) * (1 - 0.86)) / 50)
qnorm(0.025)
qnorm(0.025, lower.tail=F)
1.96 * 0.049
0.86 + 0.096
0.86 - 0.096
1200/2500
((0.48) * (1 - 0.48)) / (2500)
sqrt(((0.48) * (1 - 0.48)) / (2500))
(0.48 - 0.44) / (0.009992)
sqrt((0.48 - 0.44) / (0.009992))
qnorm(0.05, lower.tail = F)
qnorm(0.05 / 2, lower.tail = F)
qnorm(0.025, lower.tail = F)
1.96 * 0.009992
0.48 - 0.0196
0.48 + 0.0196
413 / 527
392 / 608
0.784 - 0.645
qnorm(0.025, lower.tail=F)
((0.784)(1 - 0.784)) / 527
((0.784) * (1 - 0.784)) / 527
((0.645) * (1 - 0.645)) / (608)
0.000321 + 0.000377
sqrt(0.000321 + 0.000377)
0.0264 * 1.96
0.139 - 0.052
0.139 + 0.052
94 / 125
113 / 175
0.752 - 0.646
((0.752) * (1 - 0.752)) / 125
((0.646) * (1 - 0.646)) / 175
(0.00149 + 0.00131)
sqrt(0.0028)
0.106 / 0.0529
qnorm(0.05, lower.tail=F)
pnorm(2.004, lower.tail=F)
qnorm(0.025, lower.tail=F)
1.96 * 0.0529
0.106 - 0.104
0.106 + 0.104
qchisq(1 - 0.05, 3)
pchisq(24.33, 3)
pchisq(24.33, 3, lower.tail = F)
93 + 98
191 / 2
93 + 98 + 96
287/3
age = matrix(c(15, 32, 18, 5, 8, 29, 23, 18, 1, 20, 25, 22), ncol=4, byrow=T)
age
colnames(age) = c('I', 'II', 'III', 'IV')
rownames(age) = c('Moderate', 'Mild', 'Severe')
diseases = as.table(age)
diseases
chisq.test(diseases)
diseases[0]
diseases[0][1]
diseases
diseases[1, ]
diseases[1, 1]
diseases[, 1]
sum(diseases[, 1])
diseases
(diseases - ((sum(diseases[, 1] * sum(diseases[1, ]))) / sum(diseases))) ** 2
(diseases[1, 1] - ((sum(diseases[, 1] * sum(diseases[1, ]))) / sum(diseases))) ** 2
(diseases[1, 1] - ((sum(diseases[, 1] * sum(diseases[1, ]))) / sum(diseases))) ** 2 / ((sum(diseases[, 1] * sum(diseases[1, ]))) / sum(diseases))
(15 - 7.78) ** 2 / 7.78
(diseases[1, 2] - ((sum(diseases[, 2] * sum(diseases[2, ]))) / sum(diseases))) ** 2 / ((sum(diseases[, 2] * sum(diseases[2, ]))) / sum(diseases))
(32 - 26.25) ** 2 / 26.25
(diseases[1, 2] - ((sum(diseases[, 2] * sum(diseases[2, ]))) / sum(diseases))) ** 2 / ((sum(diseases[, 2] * sum(diseases[2, ]))) / sum(diseases))
diseases[1, 2]
(diseases[1, 2] - ((sum(diseases[, 2] * sum(diseases[2, ]))) / sum(diseases))) ** 2 / ((sum(diseases[, 2] * sum(diseases[2, ]))) / sum(diseases))
diseases
diseases[1, 2]
(diseases[1, 2] - ((sum(diseases[, 2] * sum(diseases[1, ]))) / sum(diseases))) ** 2 / ((sum(diseases[, 2] * sum(diseases[1, ]))) / sum(diseases))
(32 - 26.25) ** 2 / 26.25
chisq.test(diseases)
qchisq(1 - 0.05, 6)
qchisq(1 - 0.05, 3)
83 / 200
(0.415) * (1 - 0.415)
0.2428 / 200
sqrt(0.001214)
(0.0415 - 0.50) / (0.0348)
(0.415 - 0.50) / (0.0348)
qnorm(0.025, lower.tail = F)
1.96 * 0.0348
0.415 - 0.068
0.415 + 0.068
prop.test(x=83, n=200, conf.level=0.95, alternative='two.sided')
binom.test(x=83, n=200,conf.level = 0.95)
pnorm(2.44)
pnorm(2.44, lower.tail = F)
prop.test(x=83, n=200, conf.level=0.95, alternative='two.sided')
prop.test(x=83, n=200, conf.level=0.95, correct = F)
prop.test(x=83, n=200, conf.level=0.95, correct = T)
0.5 * 0.5
0.25 / 200
sqrt(0.00125)
(0.50 - 0.415) / sqrt(0.00125)
36/45
20/35
0.8 * 0.2
0.16 / 45
0.8 - 0.571
0.571 * (1 - 0.571)
0.2449 / 35
0.229 + 0.00699
sqrt(0.23599)
0.229 / 0.4858
qnorm(0.025, lower.tail=F)
0.8 * 0.2
0.16 / 45
0.571 * (1 - 0.571)
0.244959 / 35
0.00356 + 0.00699
sqrt(0.01055)
0.229 / 0.1027
newspaper = matrix(c(36, 20, 9, 15), ncol=2, byrow=T)
colnames(newspaper) = c('before_9am', 'after_9am')
rownames(newspaper) = c('found', 'not_found')
newspaper = as.table(newspaper)
newspaper
chisq.test(newspaper)
(newspaper[1, 1] - ((sum(newspaper[1,]) * sum(newspaper[,1])))) ** 2 / (sum(newspaper[1,]) * sum(newspaper[,1]))
(45 * 56) / 80
(35 * 56) / 80
(45 * 24) / 80
(35 * 24) / 80
(36 - 31.5) ** 2
20.25 / 31.5
(20 - 24.5) ** 2
20.25 / 24.5
(9 - 13.5) ** 2
20.25 / 13.5
(15 - 10.5) ** 2
20.25 / 10.5
1.9286 + 1.5 + 0.8265 + 0.6428
chisq.test(newspaper)
qchisq(1 - 0.05, 1)
studies = matrix(c(229, 95, 84, 57), ncol=2, byrow=T)
studies = as.table(studies)
chisq.test(studies)
prop.test(229,324,conf.level = 0.95)
229/324
prop.test(229,324,conf.level = 0.95)
57 / 152
173 / 29761
0.0549 + 0.4179 + 0.0580 + 0.0003 + 0.0024 + 0.0003
qchisq(1 - 0.05, 2)
(182 + 162)
14073 + 18325
(344/32398)
(347/32398)
(36 + 20) / (45 + 35)
56 / 80
0.7 * 0.3
(1/45)
1/35
0.8 - 0.571
0.21 * (0.0222 + 0.0285)
sqrt(0.01065)
0.229 / 0.1032
229/313
qnorm(0.025)
0.732 * (1 - 0.732)
0.196 / 313
sqrt(0.000626)
1.96 * 0.02502
0.732 - 0.049
0.732 + 0.049
prop.test(x=229, n=313, conf.level = 0.95, correct = F)
prop.test(x=229, n=313, conf.level = 0.95, correct = T)
0.7316 + 0.0490
0.7316 - 0.0490
95 / 152
229 + 95
313 + 152
324 / 465
1 - 0.697
0.732 - 9.625
0.732 - 0.625
0.697 * 0.303
(1/313)
(1/313) + (1/152)
0.211 * 0.00977
sqrt(0.00206)
0.107 / 0.04538
qnorm(0.025, lower.tail = F)
1/313
(1/313) + (1/152)
((229 - ((312*324)/465)) ** 2) / (312*324)/465)
((229 - ((312*324)/465)) ** 2) / ((312*324)/465)
((95 - ((152*324)/465)) ** 2) / ((152*324)/465)
((84 - ((313*141)/465)) ** 2) / ((313*141)/465)
((57 - ((152*141)/465)) ** 2) / ((152*141)/465)
0.6197 + 1.1238 + 1.2540 + 2.5823
qchisq(1-0.05, 1)
qchisq(1-0.01, 8)
qchisq(1-0.001, 8)
setwd('D:\\Shriram\\MS Computer Science\\Stat 8010\\R')
